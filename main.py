# user_management.py

# Создаем класс Пользователь, который будет базовым классом для всех пользователей
class Пользователь:
    def __init__(self, id_пользователя, имя, уровень_доступа='пользователь'):
        """
        Инициализация класса Пользователь.
        :param id_пользователя: Уникальный идентификатор пользователя
        :param имя: Имя пользователя
        :param уровень_доступа: Уровень доступа пользователя (по умолчанию 'пользователь')
        """
        self.__id_пользователя = id_пользователя          # Приватный атрибут для хранения ID пользователя
        self.__имя = имя                # Приватный атрибут для хранения имени пользователя
        self.__уровень_доступа = уровень_доступа # Приватный атрибут для хранения уровня доступа пользователя

    def получить_id(self):
        """
        Геттер для получения ID пользователя.
        :return: ID пользователя
        """
        return self.__id_пользователя

    def получить_имя(self):
        """
        Геттер для получения имени пользователя.
        :return: Имя пользователя
        """
        return self.__имя

    def получить_уровень_доступа(self):
        """
        Геттер для получения уровня доступа пользователя.
        :return: Уровень доступа пользователя
        """
        return self.__уровень_доступа

    def установить_имя(self, имя):
        """
        Сеттер для установки нового имени пользователя.
        :param имя: Новое имя пользователя
        """
        self.__имя = имя

    def установить_уровень_доступа(self, уровень_доступа):
        """
        Сеттер для установки нового уровня доступа пользователя.
        :param уровень_доступа: Новый уровень доступа пользователя
        """
        self.__уровень_доступа = уровень_доступа

# Создаем класс Администратор, который наследуется от класса Пользователь
class Администратор(Пользователь):
    def __init__(self, id_пользователя, имя, уровень_админа='админ'):
        """
        Инициализация класса Администратор.
        :param id_пользователя: Уникальный идентификатор администратора
        :param имя: Имя администратора
        :param уровень_админа: Уровень доступа администратора (по умолчанию 'админ')
        """
        super().__init__(id_пользователя, имя, уровень_админа) # Вызов конструктора базового класса Пользователь
        self.__список_пользователей = [] # Приватный атрибут для хранения списка пользователей

    def добавить_пользователя(self, пользователь):
        """
        Метод для добавления нового пользователя в систему.
        :param пользователь: Экземпляр класса Пользователь, который будет добавлен
        """
        if isinstance(пользователь, Пользователь): # Проверка, что добавляемый объект является экземпляром класса Пользователь
            self.__список_пользователей.append(пользователь) # Добавление пользователя в список
            print(f"Пользователь {пользователь.получить_имя()} добавлен.")
        else:
            print("Добавлять можно только экземпляры класса Пользователь.") # Сообщение об ошибке, если объект не является экземпляром Пользователь

    def удалить_пользователя(self, id_пользователя):
        """
        Метод для удаления пользователя из системы по ID.
        :param id_пользователя: ID пользователя, который будет удален
        """
        for пользователь in self.__список_пользователей: # Поиск пользователя в списке по ID
            if пользователь.получить_id() == id_пользователя:
                self.__список_пользователей.remove(пользователь) # Удаление пользователя из списка
                print(f"Пользователь {пользователь.получить_имя()} удален.")
                return
        print(f"Пользователь с ID {id_пользователя} не найден.") # Сообщение, если пользователь не найден

    def получить_список_пользователей(self):
        """
        Геттер для получения списка всех пользователей.
        :return: Список пользователей
        """
        return self.__список_пользователей

# Функция main для демонстрации работы классов
def main():
    # Создаем пользователей
    пользователь1 = Пользователь(1, "Алиса")
    пользователь2 = Пользователь(2, "Боб")
    пользователь3 = Пользователь(3, "Чарли")

    # Создаем администратора
    администратор = Администратор(0, "Админ")

    # Администратор добавляет пользователей
    администратор.добавить_пользователя(пользователь1)
    администратор.добавить_пользователя(пользователь2)
    администратор.добавить_пользователя(пользователь3)

    # Вывод списка пользователей
    print("\nТекущий список пользователей:")
    список_пользователей = администратор.получить_список_пользователей()
    for пользователь in список_пользователей:
        print(f"ID пользователя: {пользователь.получить_id()}, Имя: {пользователь.получить_имя()}, Уровень доступа: {пользователь.получить_уровень_доступа()}")

    # Администратор удаляет пользователя
    администратор.удалить_пользователя(2)

    # Вывод обновленного списка пользователей
    print("\nОбновленный список пользователей:")
    список_пользователей = администратор.получить_список_пользователей()
    for пользователь in список_пользователей:
        print(f"ID пользователя: {пользователь.получить_id()}, Имя: {пользователь.получить_имя()}, Уровень доступа: {пользователь.получить_уровень_доступа()}")

# Проверка, что скрипт запускается напрямую
if __name__ == "__main__":
    main()
